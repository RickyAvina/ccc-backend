# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  ccc-marketplace

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  # getAllItemsFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/get-all-items.getAllItemsHandler
  #     Runtime: nodejs16.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref SampleTable
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         SAMPLE_TABLE: !Ref SampleTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /
  #           Method: GET

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # authenticatedCallback:
  #     Type: AWS::Serverless::Function
  #     Properties:
  #       Handler: src/handlers/authenticated-callback.authenticatedUserCallbackHandler
  #       Runtime: nodejs16.x
  #       Architectures:
  #         - x86_64
  #       MemorySize: 128
  #       Timeout: 100
  #       Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
  #       Policies:
  #         # Give Create/Read/Update/Delete Permissions to the SampleTable
  #         - DynamoDBCrudPolicy:
  #             TableName: !Ref SampleTable
  #       Environment:
  #         Variables:
  #           # Make table name accessible as environment variable from function code during execution
  #           SAMPLE_TABLE: !Ref SampleTable
  #       Events:
  #         Api:
  #           Type: Api
  #           Properties:
  #             Path: /{id}
  #             Method: GET

  # This is a Lambda function config associated with the source code: get-by-id.js
  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-user-by-email.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get user from table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-user/{email}
            Method: GET

  createUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-user.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Create a new user
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /create-user
            Method: POST

  # # Each Lambda function is defined by properties:
  # # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # # This is a Lambda function config associated with the source code: put-item.js
  # putItemFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/put-item.putItemHandler
  #     Runtime: nodejs16.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SampleTable
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref SampleTable
  #     Environment:
  #       Variables:
  #         # Make table name accessible as environment variable from function code during execution
  #         SAMPLE_TABLE: !Ref SampleTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /
  #           Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}

  # ServerlessRestAPI:
  #   Type: 'AWS::ApiGateway::RestApi'
  #   Properties:
  #     Description: A test API
  #     Name: ServerlessRestApi

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "User"
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        -
          IndexName: Email-index
          KeySchema:
            -
              AttributeName: "email"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
